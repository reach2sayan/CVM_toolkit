"""
Code Created By Sayan Samanta and Axel Van de Walle
"""

import argparse
import os
from pathlib import Path
import sys
import warnings
import json
from json import JSONEncoder
import subprocess
from datetime import datetime

import numpy as np

import optimiser as opt
from constraints import Constraints
from bounds import CorrBounds
from energyfunctions import *
from clusterdata import ClusterInfo
from logger import Logger
from sro_fit import sro_fit
from sro_model import sro_model

class NumpyArrayEncoder(JSONEncoder):
    def default(self, obj):
        if isinstance(obj, np.ndarray):
            return obj.tolist()
        return JSONEncoder.default(self, obj)

if __name__ == '__main__':

    def custom_linspace(start, stop, step=1):
        """
        Like np.linspace but uses step instead of num
        This is inclusive to stop, so if start=1, stop=3, step=0.5
        Output is: array([1., 1.5, 2., 2.5, 3.])
        """

        return np.linspace(start, stop, int((stop - start) / step + 1))

    np.set_printoptions(suppress=True, precision=4)
    tdate = datetime.now().strftime('%b-%d-%k%M')
    structure = os.getcwd()
    path = Path(structure)
    phase = str(path.parent.absolute())

    parser = argparse.ArgumentParser(description='CVM SRO Error Correction Code by Sayan Samanta and Axel van de Walle',
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     )
    opt_params = parser.add_argument_group("Optimisation Parameters")
    sro_fit_params = parser.add_argument_group(
        "Parameters related to fitting SRO as a function of temperature")
    clus_params = parser.add_argument_group("Parameters related to CVM")

    parser.add_argument('--seed',
                        default=42,
                        type=float,
                        help='set numpy random seed (for reproducible experiments)'
                        )
    clus_params.add_argument('--eci',
                             default='eci.out',
                             help="file containing ECI's ",
                             )
    clus_params.add_argument('--vmat',
                             default='vmat.out',
                             help="file containing the vmatrix ",
                             )
    clus_params.add_argument('--clusters', '-cl',
                             default='clusters.out',
                             help="file contain the name of the cluster file",
                             )
    clus_params.add_argument('--maximal_clusters',
                             default='maxclus.in',
                             help="file contain the maximal cluster description ",
                            )
    clus_params.add_argument('--clustermult',
                             default='clusmult.out',
                             help="file containing multiplicities for each cluster ",
                             )
    clus_params.add_argument('--kb',
                             default='configkb.out',
                             help="file containing the kikuchi-barker coefficients ",
                             )
    clus_params.add_argument('--configmult',
                             default='configmult.out',
                             help="file containing multiplicities for each configuration ",
                             )
    clus_params.add_argument('--config',
                             default='config.out',
                             help="file containing subcluster descriptions ",
                             )
    clus_params.add_argument('--lat', '-l',
                             default='lat.in',
                             help="contains the lattice description of the phase "
                             )

    sro_fit_params.add_argument('--Tmin',
                                default=100,
                                type=int,
                                help="Minimum T at which the SRO correction is to be made "
                                )
    sro_fit_params.add_argument('--Tmax',
                                default=2000,
                                type=int,
                                help="Maximum T at which the SRO correction is to be made "
                                )
    sro_fit_params.add_argument('--Tstep',
                                default=100,
                                type=int,
                                help="Temperature increment steps in which the SRO correction is to be evaluated "
                                )
    sro_fit_params.add_argument('--inJoules',
                                action='store_true',
                                default=False,
                                help="Sets energy units to Joules/mol"
                                )
    sro_fit_params.add_argument('--sro_method',
                                default='lm',
                                help="method of fitting a function on T to the SRO correction",
                                )
    sro_fit_params.add_argument('--coeff_out',
                                default='sro_coeffs.out',
                                help="filename to store the result of the fit ",
                                )
    sro_fit_params.add_argument('--coeff_in',
                                default='sro_coeffs.in',
                                help="filename to store the initial params of the fit ",
                                )
    sro_fit_params.add_argument('--skip_sro_fit',
                                action='store_true',
                                default=False,
                                help="Flag to skip fitting SRO correction as a function of T",
                                )
    sro_fit_params.add_argument('--fit_sro_only',
                                action='store_true',
                                default=False,
                                help="Flag to optimisation but only fit SRO correction as a function of",
                                )

    opt_params.add_argument('--no_constraint',
                            action='store_true',
                            default=False,
                            help="Flag to disable norm constraint "
                            )
    opt_params.add_argument('--constr_tol',
                            type=float,
                            default=1e-8,
                            help="Value for minimum tolerance of constraints"
                            )
    opt_params.add_argument('--fit_ordered_only',
                            action='store_true',
                            default=False,
                            help="Flag to find find_ordered state only and exit."
                            )
    opt_params.add_argument('--linprog_method',
                            default='revised simplex',
                            help="Method of linear programming for findiing ordered correlations",
                            )
    opt_params.add_argument('--verbose', '-v', action='count', default=0,
                            help="Indicate the verbosity of the fit ",
                            )
    opt_params.add_argument('--approx_deriv',
                            action='store_true',
                            default=False,
                            help="Flag to enable estimation of derivatives",
                            )
    opt_params.add_argument('--no_inter',
                            action='store_true',
                            default=False,
                            help="Flag to enable if intermediate results should be displayed",
                            )
    opt_params.add_argument('--maxiter',
                            default=5000,
                            type=int,
                            help="Indicate maximum iterations for the local optimiser ",
                            )
    opt_params.add_argument('--maxiter_simplex',
                            default=1000000,
                            type=int,
                            help="Indicate maximum iterations for simplex procedure ",
                            )
    opt_params.add_argument('--earlystop',
                            default=20,
                            type=int,
                            help="Number of steps to break out of trials if no new minima has been found.",
                            )
    opt_params.add_argument('--basinhopping','-bh',
                            action='store_true',
                            default=False,
                            help="Flag to turn on basinhopping global minimisation trials.",
                           )
    opt_params.add_argument('--xtol',
                            default=1e-12,
                            type=float,
                            help="Indicate the acceptable difference between two iterations ",
                            )
    opt_params.add_argument('--gtol',
                            default=1e-12,
                            type=float,
                            help="Indicate the acceptable violation of constraints ",
                            )
    opt_params.add_argument('--random_trial',
                            action='store_true',
                            default=False,
                            help="Acivates picking any random trial corr",
                            )
    opt_params.add_argument('--trial_variance',
                            default=0.001,
                            type=float,
                            help="Trial Variance",
                            )
    opt_params.add_argument('--initial_tr_radius',
                            default=1,
                            type=float,
                            help="Indicate the starting trust radius",
                            )
    opt_params.add_argument('--initial_constr_penalty',
                            default=1,
                            type=float,
                            help="Indicate intial constraint penalty",
                           )
    opt_params.add_argument('--global_trials',
                            default=50,
                            type=int,
                            help="Indicate the number of initial point iteration for global minima search ",
                            )
    opt_params.add_argument('--show_warning',
                            action='store_true',
                            default=False,
                            help="Enables to show warning ",
                            )
    opt_params.add_argument('--out',
                            default='result.json',
                            help="Indicates the name of the output file ",
                            )
    opt_params.add_argument('--toscreen',
                            action='store_true',
                            default=False,
                            help="Enable logging to screen ",
                            )
    opt_params.add_argument('--log',
                            default='log.out',
                            help="Filename for the log file "
                            )

    args = parser.parse_args()

    if not args.show_warning:
        warnings.filterwarnings("ignore")

    with open(f'{structure}/energy', 'r') as energy_file:
        e = float(energy_file.readline())
    with open(f"{structure}/str.in", 'r') as str_out:
        str_lines = str_out.readlines()
    with open(f"{structure}/{args.lat}", 'r') as lat_out:
        lat_lines = lat_out.readlines()

    if len(str_lines[0].split(' ')) > 3:
        num_str_atoms = len(str_lines) - 4
    else:
        num_str_atoms = len(str_lines) - 6

    if len(lat_lines[0].split(' ')) > 3:
        num_lat_atoms = len(lat_lines) - 4
    else:
        num_lat_atoms = len(lat_lines) - 6

    # This part of the code only fits the SRO correction vs T part.
    # This section is repeated at the very end because I didn't want to write another wrapper for 20 lines of code.
    if args.fit_sro_only:
        print(f"No. of atoms in primitive unit cell : {num_lat_atoms}")
        print(f"No. of atoms in structure supercell : {num_str_atoms}")
        print('Flag to fit SRO as a function of T only found. Skipping all optimisation Steps.')
        best_params, _, return_line, return_line_replaced, varnames = sro_fit(func=sro_model,
                                                                              results=f'{structure}/{args.out}',
                                                                              coeff_in=f'{structure}/{args.coeff_in}',
                                                                              inJoules=args.inJoules,
                                                                              num_atoms=num_str_atoms,
                                                                              )
        with open(f'{structure}/{args.coeff_out}-{tdate}', 'w') as fparams:
            fparams.write(return_line+'\n')
            for varname, param in zip(varnames, best_params):
                fparams.write(varname+'='+str(param)+'\n')

        #np.savetxt(f'{structure}/{args.coeff_out}-{tdate}', best_params)
        with open(f'{structure}/func', 'w') as ffunc:
            ffunc.write(return_line_replaced)
        sys.exit('SRO Fit completed. Exiting..')

    if args.no_constraint:
        args.log = f'{args.log}-nocons-{tdate}'
        args.out = f'{args.out}-nocons-{tdate}'
    else:
        args.log = f'{args.log}-cons-{tdate}'
        args.out = f'{args.out}-cons-{tdate}'

    sys.stdout = Logger(sys.stdout, args.log, args.toscreen)

    print(f"No. of atoms in primitive unit cell : {num_lat_atoms}")
    print(f"No. of atoms in structure supercell : {num_str_atoms}")

    print(f"Phase: {phase.rsplit('/',maxsplit=1)[-1]}")
    print(f"Structure : {structure.split('/')[-1]}")

    try:
        _ = subprocess.run(['cvmclus', f'-m={phase}/{args.maximal_clusters}', f'-l={structure}/{args.lat}'],
                           stdout=subprocess.PIPE,
                           stderr=subprocess.PIPE,
                           check=True
                           )
    except subprocess.SubprocessError as suberr:
        print('Error in generating cluster configuration files for CVM...')
        print(suberr)
        print('Continuing to run. Might work if the required files already exists, maybe created by some previous run of cvmclus')

    print("Cluster Description for CVM:")
    clusters_full = ClusterInfo(clusters_fname=f'{structure}/{args.clusters}',
                                kb_fname=f'{structure}/{args.kb}',
                                clustermult_fname=f'{structure}/{args.clustermult}',
                                configmult_fname=f'{structure}/{args.configmult}',
                                config_fname=f'{structure}/{args.config}',
                                vmat_fname=f'{structure}/{args.vmat}',
                                eci_fname=f'{structure}/{args.eci}',
                                )
    print(f'ECIs: \n{clusters_full.eci}')

    F_sqs = e
    with open(f'{structure}/energy_atom', 'w') as feperatom:
        feperatom.write(str(F_sqs/num_str_atoms))
        print(f"Read in SQS energy\t: {F_sqs/num_str_atoms:.4f}")

    results_sro = []
    corr_rnd = subprocess.run(['corrdump', '-c', f'-cf={structure}/{args.clusters}', f'-s={structure}/str.in', f'-l={structure}/{args.lat}', '-rnd'],
                              stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE,
                              check=True
                              )
    # convert from bytes to string list
    corr_rnd = corr_rnd.stdout.decode('utf-8').split('\t')[:-1]
    corr_rnd = np.array(corr_rnd, dtype=np.float32)  # convert to arrays
    assert corr_rnd[0] == 1
    assert clusters_full.check_result_validity(corr_rnd)
    np.savetxt('disordered_correlations.out', corr_rnd)

    with open('disordered_rho.out', 'w') as frho:
        for vmat in clusters_full.vmat.values():
            frho.write(f'{" ".join(map(str,vmat@corr_rnd))}\n')

    FIXED_CORRS = corr_rnd[clusters_full.single_point_clusters]
    print(f'No. of singlets : {len(FIXED_CORRS)}')
    print(FIXED_CORRS)
    constraints = Constraints(clusters_full)
    bounds = CorrBounds(clusters_full.num_clusters, len(
        clusters_full.single_point_clusters))

    # This part of the code find the ordered correlation given the current ECI
    # Is skipped if no norm constraint if requried

    options_ordered = {'disp': bool(args.verbose),
                       'maxiter': args.maxiter_simplex,
                       'tol': args.xtol,
                      }

    if Path(f"{structure}/ordered_correlations.out").is_file():
        print("File containing ordered correlations read.")
        corr_ord = np.loadtxt(f"{structure}/ordered_correlations.out")
        E_ord = F(corr_ord,
                  clusters_full.vmat,
                  clusters_full.kb,
                  clusters_full.clusters,
                  clusters_full.clustermult,
                  clusters_full.configmult,
                  0,
                  clusters_full.eci)
    else:
        print('Calculating Ordered Correlation....')
        result_ord = opt.find_ordered(cluster_data=clusters_full,
                                      corr=corr_rnd,
                                      method=args.linprog_method,
                                      options=options_ordered,
                                      )
        corr_ord = result_ord.x
        E_ord = result_ord.fun

    if args.no_constraint:
        print("Norm Constraint not activated.\n")
    else:
        print("Norm Constraint activated...\n")
    if args.random_trial:
        print('Random Trial Flag On.')

    options = {'verbose': args.verbose,
               'maxiter': args.maxiter,
               'xtol': args.xtol,
               'gtol': args.gtol,
               'initial_tr_radius': args.initial_tr_radius,
               'initial_constr_penalty': args.initial_constr_penalty,
              }

    E_rnd = F(corr_rnd,
              clusters_full.vmat,
              clusters_full.kb,
              clusters_full.clusters,
              clusters_full.clustermult,
              clusters_full.configmult,
              0,
              clusters_full.eci)

    print(f"Ordered correlation\t: {corr_ord}")
    print(f"Ordered Energy (in eV/atom)\t: {E_ord/num_lat_atoms}")
    print("Ordered Rho:\n")
    clusters_full.print_rho(corr_ord)
    print()
    print(f"Disordered correlation\t: {corr_rnd}")
    print(f"Disordered Energy (in eV/atom)\t: {E_rnd/num_lat_atoms}")
    print("Disordered Rho:\n")
    clusters_full.print_rho(corr_rnd)
    ord2disord_dist = np.linalg.norm(corr_ord - corr_rnd)
    print(
        f"L2 norm between the fully disordered and ordered state:\t {ord2disord_dist}")
    print('\n========================================\n')
    if args.fit_ordered_only:
        sys.exit("Flag to find ordered state only detected. Exiting...")

    constraints_sro = constraints.get_constraints_sro(ord2disord_dist, corr_rnd, args.no_constraint)
    print(f"Constraints : \n {constraints_sro}")

    bounds_sro = bounds.get_sro_bounds(FIXED_CORRS)
    print('Starting T optimisation...\n')

    # End of the calcualting ordered correlations
    if args.approx_deriv:
        print('Approximating the derivatives - Jacobian : a 3-point finite diffrence scheme, Hessian : BFGS')
    else:
        print('Using Analytical gradients and hessian...')

    E_solid_solution = F_sqs/num_str_atoms + \
            (E_ord/num_lat_atoms - E_rnd/num_lat_atoms)
    results_sro.append({'structure': structure.split('/')[-1],
                        'temperature': 0,
                        'corrs': list(corr_ord),
                        'F_sol': E_solid_solution,
                        'F_sqs': F_sqs/num_str_atoms,
                        'F_ord': E_ord/num_lat_atoms,
                        'F_rnd': E_rnd/num_lat_atoms,
                        'F_cvm': E_ord/num_lat_atoms,
                        'distance': ord2disord_dist/2 - np.linalg.norm(corr_ord - corr_rnd)
                       },
                      )
    for T in custom_linspace(start=args.Tmin, stop=args.Tmax, step=args.Tstep):

        print(f'\nOptimising at temperature {T} K')

        F_rnd = F(corr_rnd,
                  clusters_full.vmat,
                  clusters_full.kb,
                  clusters_full.clusters,
                  clusters_full.clustermult,
                  clusters_full.configmult,
                  T,
                  clusters_full.eci)
        F_ord = F(corr_ord,
                  clusters_full.vmat,
                  clusters_full.kb,
                  clusters_full.clusters,
                  clusters_full.clustermult,
                  clusters_full.configmult,
                  T,
                  clusters_full.eci)
        print(
            f"Ordered CVM Free energy (eV/atom) @ T = {T}K\t: {F_ord/num_lat_atoms}")
        print(f"Ordered Correlations @ T = {T}K\t: {corr_ord}")
        print(
            f"Disordered CVM Free energy (eV/atom) @ T = {T}K\t: {F_rnd/num_lat_atoms}")
        print(f"Disordered Correlations @ T = {T}K\t: {corr_rnd}")


        if args.basinhopping:
            F_cvm, corr_opt, grad, constr_viol = opt.fit_sro_correction_basinhopping(F=F_efficient,
                                                                                     cluster_data=clusters_full,
                                                                                     temp=T,
                                                                                     options=options,
                                                                                     jac=F_jacobian_efficient,
                                                                                     hess=F_hessian_efficient,
                                                                                     NUM_TRIALS=args.global_trials,
                                                                                     bounds=bounds_sro,
                                                                                     constraints=constraints_sro,
                                                                                     constr_tol=args.constr_tol,
                                                                                     corrs_trial=corr_rnd,
                                                                                     trial_variance=args.trial_variance,
                                                                                     structure=structure,
                                                                                     lattice_file=args.lat,
                                                                                     clusters_file=args.clusters,
                                                                                     random_trial=args.random_trial,
                                                                                     display_inter=not args.no_inter,
                                                                                     approx_deriv=args.approx_deriv,
                                                                                     seed=args.seed,
                                                                                     early_stopping_cond=args.earlystop,
                                                                                     ord2disord_dist=ord2disord_dist,
                                                                                     num_atoms_per_clus=num_lat_atoms,
                                                                                    )
        else:
            F_cvm, corr_opt, grad, constr_viol = opt.fit_sro_correction(F=F_efficient,
                                                                        cluster_data=clusters_full,
                                                                        temp=T,
                                                                        options=options,
                                                                        jac=F_jacobian_efficient,
                                                                        hess=F_hessian_efficient,
                                                                        NUM_TRIALS=args.global_trials,
                                                                        bounds=bounds_sro,
                                                                        constraints=constraints_sro,
                                                                        constr_tol=args.constr_tol,
                                                                        corrs_trial=corr_rnd,
                                                                        trial_variance=args.trial_variance,
                                                                        structure=structure,
                                                                        lattice_file=args.lat,
                                                                        clusters_file=args.clusters,
                                                                        random_trial=args.random_trial,
                                                                        display_inter=not args.no_inter,
                                                                        approx_deriv=args.approx_deriv,
                                                                        seed=args.seed,
                                                                        early_stopping_cond=args.earlystop,
                                                                        ord2disord_dist=ord2disord_dist,
                                                                        num_atoms_per_clus=num_lat_atoms,
                                                                       )
        print(f"Disordered CVM Free energy (eV/atom) @ T = {T}K\t: {F_rnd/num_lat_atoms}")
        print(f"Ordered CVM Free energy (eV/atom) @ T = {T}K\t: {F_ord/num_lat_atoms}")
        print(
            f"Optimised CVM Free energy (eV/atom) @ T = {T}K\t: {F_cvm/num_lat_atoms}")
        print(f"Optimised Correlation @ T = {T}K\t: {corr_opt}")
        print(f"Constraint Violation: {constr_viol}")
        print(
            f"Optimised Free energy Gradient: {np.array2string(grad)}")
        print("Optimised Rhos:")
        clusters_full.print_rho(corr_opt)
        print(f'Distance: {ord2disord_dist/2 - np.linalg.norm(corr_opt - corr_rnd)}')
        print("\n#################################################")
        F_solid_solution = F_sqs/num_str_atoms + \
            (F_cvm/num_lat_atoms - F_rnd/num_lat_atoms)
        results_sro.append({'structure': structure.split('/')[-1],
                            'temperature': T,
                            'corrs': corr_opt,
                            'F_sol': F_solid_solution,
                            'F_sqs': F_sqs/num_str_atoms,
                            'F_ord': F_ord/num_lat_atoms,
                            'F_rnd': F_rnd/num_lat_atoms,
                            'F_cvm': F_cvm/num_lat_atoms,
                            'distance': np.float64(ord2disord_dist/2) - np.linalg.norm(corr_opt - corr_rnd)
                            }
                          )

        with open(args.out, 'w') as fout:
            json.dump(results_sro, fout, indent="", cls=NumpyArrayEncoder)

    print('Finished Optimising for SRO correction')

    # This section has the same code as above. But does the fit following a full optimisation
    if args.skip_sro_fit:
        print('Flag to skip SRO correction fitting as a function of T.')
    else:
        print('Fitting SRO corrections to a function of T')
        best_params, _, return_line, return_line_replaced, varnames = sro_fit(func=sro_model,
                                                                              results=f'{structure}/{args.out}',
                                                                              coeff_in=f'{structure}/{args.coeff_in}',
                                                                              inJoules=args.inJoules,
                                                                              num_atoms=num_str_atoms,
                                                                              )
        with open(f'{structure}/{args.coeff_out}-{tdate}', 'w') as fparams:
            fparams.write(return_line+'\n')
            for varname, param in zip(varnames, best_params):
                fparams.write(varname+'='+str(param)+'\n')

        with open(f'{structure}/func', 'w') as ffunc:
            ffunc.write(return_line_replaced)
    print('Finished SRO fitting.')
    print('SRO Correction completed.')
